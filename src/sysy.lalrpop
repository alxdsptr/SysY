use crate::ast::*;
use std::rc::Rc;

// lalrpop 里的约定
grammar;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  // 剩下的情况采用默认方式处理
  _
}
//CompUnit    ::= [CompUnit] FuncDef;
//
//FuncDef     ::= FuncType IDENT "(" [FuncFParams] ")" Block;
//FuncType    ::= "void" | "int";
//FuncFParams ::= FuncFParam {"," FuncFParam};
//FuncFParam  ::= BType IDENT;
//
pub CompUnit: CompUnit = <comp_unit: CompUnit?> <func_def: FuncDef> => CompUnit {
    comp_unit: Rc::new(comp_unit),
    func_def: Rc::new(func_def),
 };

FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" <func_params: FuncFParams?> ")" <block: Block> => FuncDef {
    func_type,
    params: Rc::new(func_params),
    ident,
    block: Rc::new(block),
  },
}
FuncFParams: FuncFParams = {
  <func_param: FuncFParam> <params: ("," <FuncFParam>)*> => {
    let mut fparams = vec![func_param];
    fparams.extend(params);
    FuncFParams { params: Rc::new(fparams) }
  }
};
FuncFParam: FuncFParam = {
  <btype: BType> <ident: Ident> => FuncFParam { btype, ident }
};

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <block_item: (BlockItem)* > "}" => Block { items: Rc::new(block_item) };
BlockItem: BlockItem = {
  <decl: Decl> => BlockItem::Decl(Rc::new(decl)),
  <stmt: Stmt> => BlockItem::Stmt(Rc::new(stmt))
};
Decl: Decl = {
  <const_decl: ConstDecl> => Decl::ConstDecl(Rc::new(const_decl)),
  <var_decl: VarDecl> => Decl::VarDecl(Rc::new(var_decl))
};
ConstDecl: ConstDecl = {
  "const" <btype: BType> <const_def: ConstDef> <defs: ("," <ConstDef>)*> ";" => {
    let mut const_defs = vec![const_def];
    const_defs.extend(defs);
    ConstDecl {
      btype,
      const_defs: Rc::new(const_defs),
    }
  }
};
ConstDef: ConstDef = {
  <ident: Ident> "=" <const_init_val: ConstInitVal> => ConstDef {
    ident,
    const_init_val: Rc::new(const_init_val),
  }
};

VarDecl: VarDecl = {
  <btype: BType> <var_def: VarDef> <defs: ("," <VarDef>)*> ";" => {
    let mut var_defs = vec![var_def];
    var_defs.extend(defs);
    VarDecl {
      btype,
      var_defs: Rc::new(var_defs),
    }
  }
};

VarDef: VarDef = {
  <ident: Ident> => VarDef::Def(ident),
  <ident: Ident> "=" <init_val: InitVal> => VarDef::Init(ident, Rc::new(init_val)),
};
InitVal: InitVal = {
  <exp: Exp> => InitVal::Exp(Rc::new(exp)),
};

ConstInitVal: ConstInitVal = {
  <const_exp: Exp> => ConstInitVal::ConstExp(Rc::new(const_exp)),
};

BType: BType = "int" => BType::Int;

Stmt: Stmt = {
    "return" <exp: Exp?> ";" => Stmt::Return(Rc::new(exp)),
    <lval: LVal> "=" <exp: Exp> ";" => Stmt::Assign(lval, Rc::new(exp)),
    <exp: Exp?> ";" => Stmt::Exp(Rc::new(exp)),
    <block: Block> => Stmt::Block(Rc::new(block)),
    "if" "(" <exp: Exp> ")" <stmt: Stmt>  => Stmt::If(Rc::new(exp), Rc::new(stmt), Rc::new(None)),
    "if" "(" <exp: Exp> ")" <stmt: withElse> "else" <else_: Stmt> => Stmt::If(Rc::new(exp), Rc::new(stmt), Rc::new(Some(else_))),
    "while" "(" <exp: Exp> ")" <stmt: Stmt> => Stmt::While(Rc::new(exp), Rc::new(stmt)),
    "break" ";" => Stmt::Break,
    "continue" ";" => Stmt::Continue,
};
withElse: Stmt = {
    "return" <exp: Exp?> ";" => Stmt::Return(Rc::new(exp)),
    <lval: LVal> "=" <exp: Exp> ";" => Stmt::Assign(lval, Rc::new(exp)),
    <exp: Exp?> ";" => Stmt::Exp(Rc::new(exp)),
    <block: Block> => Stmt::Block(Rc::new(block)),
    "if" "(" <exp: Exp> ")" <stmt: withElse> "else" <else_: withElse> => Stmt::If(Rc::new(exp), Rc::new(stmt), Rc::new(Some(else_))),
};

LVal: LVal = {
    <ident: Ident> => LVal{ ident },
};

Exp: Exp = {
  <l_or_exp: LOrExp> => Exp { l_or_exp: Rc::new(l_or_exp) },
};
LOrExp: LOrExp = {
    <l_and_exp: LAndExp> => LOrExp::LAndExp( Rc::new(l_and_exp) ),
    <l_or_exp: LOrExp> "||" <l_and_exp: LAndExp> => LOrExp::Or( Rc::new(l_or_exp), Rc::new(l_and_exp) )
};
LAndExp: LAndExp = {
    <eq_exp: EqExp> => LAndExp::EqExp( Rc::new(eq_exp) ),
    <l_and_exp: LAndExp> "&&" <eq_exp: EqExp> => LAndExp::And( Rc::new(l_and_exp), Rc::new(eq_exp) )
};
EqExp: EqExp = {
    <rel_exp: RelExp> => EqExp::RelExp( Rc::new(rel_exp) ),
    <eq_exp: EqExp> <eq_op: EqOp> <rel_exp: RelExp> => EqExp::Eq(Rc::new(eq_exp), eq_op, Rc::new(rel_exp))
};
EqOp: EqOp = {
    "==" => EqOp::Eq,
    "!=" => EqOp::Neq
};
RelExp: RelExp = {
    <add_exp: AddExp> => RelExp::AddExp (Rc::new(add_exp)),
    <rel_exp: RelExp> <rel_op: RelOp> <add_exp: AddExp> => RelExp::Rel(Rc::new(rel_exp), rel_op, Rc::new(add_exp))
};
RelOp: RelOp = {
    "<" => RelOp::Lt,
    ">" => RelOp::Gt,
    "<=" => RelOp::Le,
    ">=" => RelOp::Ge
};
AddExp: AddExp = {
    <mul_exp: MulExp> => AddExp::MulExp (Rc::new(mul_exp)),
    <add_exp: AddExp> <add_op: AddOp> <mul_exp: MulExp> => AddExp::Add (Rc::new(add_exp), add_op, Rc::new(mul_exp))
};
AddOp: AddOp = {
    "+" => AddOp::Plus,
    "-" => AddOp::Minus
}

MulExp: MulExp = {
    <unary_exp: UnaryExp> => MulExp::UnaryExp (Rc::new(unary_exp)),
    <mul_exp: MulExp> <mul_op: MulOp> <unary_exp: UnaryExp> => MulExp::Mul(Rc::new(mul_exp), mul_op, Rc::new(unary_exp))
};
MulOp: MulOp = {
    "*" => MulOp::Mul,
    "/" => MulOp::Div,
    "%" => MulOp::Mod
};
//UnaryExp    ::= ...
//              | IDENT "(" [FuncRParams] ")"
//              | ...;
//FuncRParams ::= Exp {"," Exp};
//
UnaryExp: UnaryExp = {
    <primary_exp: PrimaryExp> => UnaryExp::PrimaryExp(Rc::new(primary_exp)),
    <unary_op: UnaryOp> <unary_exp: UnaryExp> => UnaryExp::UnaryOp(unary_op, Rc::new(unary_exp)),
    <ident: Ident> "(" <func_rparams: FuncRParams?> ")" => UnaryExp::Call(ident, Rc::new(func_rparams)),
};
FuncRParams: FuncRParams = {
    <exp: Exp> <rparams: ("," <Exp>)*> => {
        let mut params = vec![exp];
        params.extend(rparams);
        FuncRParams { params: Rc::new(params) }
    }
};


PrimaryExp: PrimaryExp = {
    "(" <exp: Exp> ")" => PrimaryExp::Parens(Rc::new(exp)),
    <number: Number> => PrimaryExp::Number(number),
    <lval: LVal> => PrimaryExp::LVal(lval),
};

UnaryOp: UnaryOp = {
    "+" => UnaryOp::Plus,
    "-" => UnaryOp::Minus,
    "!" => UnaryOp::Not
};

Number: i32 = <num: IntConst> => num;

// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
// 关于尖括号到底代表什么, 请 RTFM
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}

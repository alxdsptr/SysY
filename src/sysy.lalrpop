use crate::ast::*;
use std::rc::Rc;
use std::cell::RefCell;
use std::collections::VecDeque;

// lalrpop 里的约定
grammar;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*[^*]*\*+([^/*][^*]*\*+)*/" => {}, // skip multi-line comment,
  // 剩下的情况采用默认方式处理
  _
}

pub CompUnit: CompUnit = {
    <items: (DeclOrFunc)+> => CompUnit { items: Rc::new(items) }
};

DeclOrFunc: Comp = {
  <decl: Decl> => Comp::Decl(Rc::new(decl)),
  <func_def: FuncDef> => Comp::FuncDef(Rc::new(func_def)),
};

FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" <func_params: FuncFParams?> ")" <block: Block> => FuncDef {
    func_type,
    params: func_params.unwrap_or_else(|| Rc::new(vec![])),
    ident,
    block: Rc::new(block),
  },
}
FuncFParams: Rc<Vec<FuncFParam>> = {
  <func_param: FuncFParam> <params: ("," <FuncFParam>)*> => {
    let mut fparams = vec![func_param];
    fparams.extend(params);
    Rc::new(fparams)
  }
};
// FuncFParam ::= BType IDENT ["[" "]" {"[" ConstExp "]"}];
FuncFParam: FuncFParam = {
    <btype: BType> <ident: Ident> <arr: (("[" "]") ("[" <Exp> "]")*)?> => FuncFParam {
        btype,
        ident,
        array_size: match arr {
            Some((_, array_size)) => Some(array_size),
            None => None,
        },
    }
};

FuncType: FuncType = {
    "void" => FuncType::Void,
    <btype: BType> => FuncType::from_btype(btype),
};

Block: Block = "{" <block_item: (BlockItem)* > "}" => Block { items: Rc::new(block_item) };
BlockItem: BlockItem = {
  <decl: Decl> => BlockItem::Decl(Rc::new(decl)),
  <stmt: Stmt> => BlockItem::Stmt(Rc::new(stmt))
};
Decl: Decl = {
  <const_decl: ConstDecl> => Decl::ConstDecl(Rc::new(const_decl)),
  <var_decl: VarDecl> => Decl::VarDecl(Rc::new(var_decl))
};
ConstDecl: ConstDecl = {
  "const" <btype: BType> <const_def: ConstDef> <defs: ("," <ConstDef>)*> ";" => {
    let mut const_defs = vec![const_def];
    const_defs.extend(defs);
    ConstDecl {
      btype,
      const_defs: Rc::new(const_defs),
    }
  }
};
ConstDef: ConstDef = {
  <ident: Ident> <array_size: ("[" <Exp> "]")*> "=" <const_init_val: InitVal> => ConstDef {
    ident,
    array_size,
    const_init_val: Rc::new(const_init_val),
  }
};

VarDecl: VarDecl = {
  <btype: FuncType> <var_def: VarDef> <defs: ("," <VarDef>)*> ";" => {
    let mut var_defs = vec![var_def];
    var_defs.extend(defs);
    VarDecl {
      btype: BType::from_func_type(btype),
      var_defs: Rc::new(var_defs),
    }
  }
};

VarDef: VarDef = {
  <ident: Ident> <array_index: ("[" <Exp> "]")*> => VarDef::Def(ident, array_index),
  <ident: Ident> <array_index: ("[" <Exp> "]")*> "=" <init_val: InitVal> => VarDef::Init(ident, array_index, Rc::new(init_val)),
};
// InitVal       ::= Exp | "{" [InitVal {"," InitVal}] "}";
InitVal: InitVal = {
  <exp: Exp> => InitVal::Exp(Rc::new(exp)),
  "{" <init: (InitVal ("," <InitVal>)* )? > "}" => {
    let mut init_vals = VecDeque::new();
    match init {
      Some((first, rest)) => {
        init_vals.push_back(first);
        init_vals.extend(rest);
        InitVal::Array(Rc::new(RefCell::new(init_vals)))
      }
      None => {
        InitVal::Array(Rc::new(RefCell::new(VecDeque::new())))
      }
    }
  }
};
// ConstInitVal  ::= ConstExp | "{" [ConstInitVal {"," ConstInitVal}] "}";
//ConstInitVal: ConstInitVal = {
//  <const_exp: Exp> => ConstInitVal::ConstExp(Rc::new(const_exp)),
//  "{" <const_init: (ConstInitVal ("," <ConstInitVal>)* )? > "}" => {
//        let mut const_init_vals = vec![];
//        match const_init {
//          Some((first, rest)) => {
//            const_init_vals.push(first);
//            const_init_vals.extend(rest);
//            ConstInitVal::Array(Some(Rc::new(const_init_vals)))
//          }
//          None => {
//            ConstInitVal::Array(None)
//          }
//        }
//  }
//};

BType: BType = "int" => BType::Int;

Stmt: Stmt = {
    "return" <exp: Exp?> ";" => Stmt::Return(Rc::new(exp)),
    <lval: LVal> "=" <exp: Exp> ";" => Stmt::Assign(lval, Rc::new(exp)),
    <exp: Exp?> ";" => Stmt::Exp(Rc::new(exp)),
    <block: Block> => Stmt::Block(Rc::new(block)),
    "if" "(" <exp: Exp> ")" <stmt: Stmt>  => Stmt::If(Rc::new(exp), Rc::new(stmt), None),
    "if" "(" <exp: Exp> ")" <stmt: withElse> "else" <else_: Stmt> => Stmt::If(Rc::new(exp), Rc::new(stmt), Some(Rc::new(else_))),
    "while" "(" <exp: Exp> ")" <stmt: Stmt> => Stmt::While(Rc::new(exp), Rc::new(stmt)),
    "break" ";" => Stmt::Break,
    "continue" ";" => Stmt::Continue,
};
withElse: Stmt = {
    "return" <exp: Exp?> ";" => Stmt::Return(Rc::new(exp)),
    <lval: LVal> "=" <exp: Exp> ";" => Stmt::Assign(lval, Rc::new(exp)),
    <exp: Exp?> ";" => Stmt::Exp(Rc::new(exp)),
    <block: Block> => Stmt::Block(Rc::new(block)),
    "if" "(" <exp: Exp> ")" <stmt: withElse> "else" <else_: withElse> => Stmt::If(Rc::new(exp), Rc::new(stmt), Some(Rc::new(else_))),
};

LVal: LVal = {
    <ident: Ident> <array_index: ("[" <Exp> "]")*>=> LVal{ ident, array_index },
};

Exp: Exp = {
  <exp: LOrExp> => exp,
};
LOrExp: Exp = {
    <l_and_exp: LAndExp> => l_and_exp,
    <l_or_exp: LOrExp> "||" <l_and_exp: LAndExp> => Exp::BinaryExp(BinaryOp::Lor, Rc::new(l_or_exp), Rc::new(l_and_exp) )
};
LAndExp: Exp = {
    <eq_exp: EqExp> => eq_exp,
    <l_and_exp: LAndExp> "&&" <eq_exp: EqExp> => Exp::BinaryExp(BinaryOp::Land, Rc::new(l_and_exp), Rc::new(eq_exp) )
};
EqExp: Exp = {
    <rel_exp: RelExp> => rel_exp,
    <eq_exp: EqExp> <eq_op: EqOp> <rel_exp: RelExp> => Exp::BinaryExp(eq_op, Rc::new(eq_exp), Rc::new(rel_exp))
};
EqOp: BinaryOp = {
    "==" => BinaryOp::Eq,
    "!=" => BinaryOp::Neq
};
RelExp: Exp = {
    <add_exp: AddExp> => add_exp,
    <rel_exp: RelExp> <rel_op: RelOp> <add_exp: AddExp> => Exp::BinaryExp(rel_op, Rc::new(rel_exp), Rc::new(add_exp))
};
RelOp: BinaryOp = {
    "<" => BinaryOp::Lt,
    ">" => BinaryOp::Gt,
    "<=" => BinaryOp::Le,
    ">=" => BinaryOp::Ge
};
AddExp: Exp = {
    <mul_exp: MulExp> => mul_exp,
    <add_exp: AddExp> <add_op: AddOp> <mul_exp: MulExp> => Exp::BinaryExp(add_op, Rc::new(add_exp), Rc::new(mul_exp))
};
AddOp: BinaryOp = {
    "+" => BinaryOp::Add,
    "-" => BinaryOp::Sub
};
MulExp: Exp = {
    <unary_exp: UnaryExp> => unary_exp,
    <mul_exp: MulExp> <mul_op: MulOp> <unary_exp: UnaryExp> => Exp::BinaryExp(mul_op, Rc::new(mul_exp), Rc::new(unary_exp))
};
MulOp: BinaryOp = {
    "*" => BinaryOp::Mul,
    "/" => BinaryOp::Div,
    "%" => BinaryOp::Mod
};

UnaryExp: Exp = {
    <primary_exp: PrimaryExp> => primary_exp,
    <unary_op: UnaryOp> <unary_exp: UnaryExp> => Exp::UnaryExp(unary_op, Rc::new(unary_exp)),
    <ident: Ident> "(" <func_rparams: FuncRParams?> ")" => Exp::Call(ident, Rc::new(func_rparams)),
};

UnaryOp: UnaryOp = {
    "+" => UnaryOp::Pos,
    "-" => UnaryOp::Neg,
    "!" => UnaryOp::Not
};


FuncRParams: Vec<Exp> = {
    <exp: Exp> <rparams: ("," <Exp>)*> => {
        let mut params = vec![exp];
        params.extend(rparams);
        params
    }
};


PrimaryExp: Exp = {
    "(" <exp: Exp> ")" => exp,
    <number: Number> => Exp::Num(number),
    <lval: LVal> => Exp::LVal(lval),
};


Number: i32 = <num: IntConst> => num;

// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
// 关于尖括号到底代表什么, 请 RTFM
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}

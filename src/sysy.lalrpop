use crate::ast::*;
use std::rc::Rc;
// lalrpop 里的约定
grammar;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  // 剩下的情况采用默认方式处理
  _
}

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit {
    func_def: Rc::new(func_def),
 };

FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => FuncDef {
    func_type,
    ident,
    block: Rc::new(block),
  },
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <stmt: Stmt> "}" => Block { stmt: Rc::new(stmt) };

//Exp         ::= LOrExp;
//MulExp      ::= UnaryExp | MulExp ("*" | "/" | "%") UnaryExp;
//AddExp      ::= MulExp | AddExp ("+" | "-") MulExp;
//RelExp      ::= AddExp | RelExp ("<" | ">" | "<=" | ">=") AddExp;
//EqExp       ::= RelExp | EqExp ("==" | "!=") RelExp;
//LAndExp     ::= EqExp | LAndExp "&&" EqExp;
//LOrExp      ::= LAndExp | LOrExp "||" LAndExp;
Stmt: Stmt = "return" <exp: Exp> ";" => Stmt { exp: Rc::new(exp) };

Exp: Exp = {
  <l_or_exp: LOrExp> => Exp { l_or_exp: Rc::new(l_or_exp) },
};
LOrExp: LOrExp = {
    <l_and_exp: LAndExp> => LOrExp::LAndExp( Rc::new(l_and_exp) ),
    <l_or_exp: LOrExp> "||" <l_and_exp: LAndExp> => LOrExp::Or( Rc::new(l_or_exp), Rc::new(l_and_exp) )
};
LAndExp: LAndExp = {
    <eq_exp: EqExp> => LAndExp::EqExp( Rc::new(eq_exp) ),
    <l_and_exp: LAndExp> "&&" <eq_exp: EqExp> => LAndExp::And( Rc::new(l_and_exp), Rc::new(eq_exp) )
};
EqExp: EqExp = {
    <rel_exp: RelExp> => EqExp::RelExp( Rc::new(rel_exp) ),
    <eq_exp: EqExp> <eq_op: EqOp> <rel_exp: RelExp> => EqExp::Eq(Rc::new(eq_exp), eq_op, Rc::new(rel_exp))
};
EqOp: EqOp = {
    "==" => EqOp::Eq,
    "!=" => EqOp::Neq
};
RelExp: RelExp = {
    <add_exp: AddExp> => RelExp::AddExp (Rc::new(add_exp)),
    <rel_exp: RelExp> <rel_op: RelOp> <add_exp: AddExp> => RelExp::Rel(Rc::new(rel_exp), rel_op, Rc::new(add_exp))
};
RelOp: RelOp = {
    "<" => RelOp::Lt,
    ">" => RelOp::Gt,
    "<=" => RelOp::Le,
    ">=" => RelOp::Ge
};
AddExp: AddExp = {
    <mul_exp: MulExp> => AddExp::MulExp (Rc::new(mul_exp)),
    <add_exp: AddExp> <add_op: AddOp> <mul_exp: MulExp> => AddExp::Add (Rc::new(add_exp), add_op, Rc::new(mul_exp))
};
AddOp: AddOp = {
    "+" => AddOp::Plus,
    "-" => AddOp::Minus
}

MulExp: MulExp = {
    <unary_exp: UnaryExp> => MulExp::UnaryExp (Rc::new(unary_exp)),
    <mul_exp: MulExp> <mul_op: MulOp> <unary_exp: UnaryExp> => MulExp::Mul(Rc::new(mul_exp), mul_op, Rc::new(unary_exp))
};
MulOp: MulOp = {
    "*" => MulOp::Mul,
    "/" => MulOp::Div,
    "%" => MulOp::Mod
};
UnaryExp: UnaryExp = {
    <primary_exp: PrimaryExp> => UnaryExp::PrimaryExp(Rc::new(primary_exp)),
    <unary_op: UnaryOp> <unary_exp: UnaryExp> => UnaryExp::UnaryOp(unary_op, Rc::new(unary_exp))
};
PrimaryExp: PrimaryExp = {
    "(" <exp: Exp> ")" => PrimaryExp::Parens(Rc::new(exp)),
    <number: Number> => PrimaryExp::Number(number),
};

UnaryOp: UnaryOp = {
    "+" => UnaryOp::Plus,
    "-" => UnaryOp::Minus,
    "!" => UnaryOp::Not
};

Number: i32 = <num: IntConst> => num;

// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
// 关于尖括号到底代表什么, 请 RTFM
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}
